{
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/09/08/24",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ],
      "content": {
        "title": "Persistent Cross-Site Scripting vulnerability in WordPress due to unsafe processing of file names",
        "content": "a cross-site scripting vulnerability via image filename,\nlure an admin into uploading the image with the malicious file name\n A WordPress admin uploads a malicious image file requested by a user\nthis admin trusts or a popular malicious image that was spread via social media.\nWe are not sure whether this CVE-2016-7168 issue is best interpreted as a vulnerability. We think it means that the admin has the unfiltered_html capability, and proceeds with uploading the file even though its name (which contains an embedded IMG string with onerror=alert in the PoC) is visible to the admin. It seems to be more of a design change in which the meaning of unfiltered_html is slightly redefined, in a way that is helpful to many users but not all.\nOne counterargument use case is:\n- the admin of WordPress site A observes that all of their images are being stolen for use on WordPress site B\n- the process for stealing the images keeps each original filename\n- the admin of WordPress site A specifically wants one image filename to contain JavaScript code, as part of an effort to identify the operators of WordPress site B (this JavaScript code has no effect on site visitors when encountered in the context of WordPress site A)\n- the admin of WordPress site A has always relied on the Media Upload functionality in wp-admin/media-new.php for entering these filenames, and this is now broken with the upgrade to 4.6.1"
      }
    },
    {
      "url": "http://www.securityfocus.com/bid/92841",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ],
      "content": {
        "title": "WordPress Cross Site Scripting And Directory Traversal Vulnerabilities",
        "description": "WordPress is prone to a cross-site scripting vulnerability and a directory-traversal vulnerability because it fails to sufficiently sanitize user-supplied input. A remote attacker can leverage these issues to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site and to view arbitrary local files and directories within the context of the webserver. This may let the attacker steal cookie-based authentication credentials and gain access to sensitive information, which may aid in launching further attacks. Versions prior to WordPress 4.6.1 are vulnerable."
      }
    },
    {
      "url": "https://sumofpwn.nl/advisory/2016/persistent_cross_site_scripting_vulnerability_in_wordpress_due_to_unsafe_processing_of_file_names.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ],
      "content": {
        "title": "Persistent Cross-Site Scripting vulnerability in WordPress due to unsafe processing of file names",
        "description": "A persistent Cross-Site Scripting (XSS) vulnerability has been found in WordPress. An attacker can create a specially crafted image file name which, when uploaded in WordPress, injects malicious JavaScript code into the application. An attacker can use this vulnerability to perform a wide variety of actions, such as stealing victims' session tokens or login credentials, and performing arbitrary actions on their behalf. WordPress performs insufficient validation on the file name of uploaded media types and in specific images. The file name of an image is used as image Title (meta) in so called ‘attachment pages’ (HTML). An attacker can exploit this vulnerability by crafting an image file name with Cross-Site Scripting payload and lure an admin into uploading the image with the malicious file name. Please note that the WordPress admin (victim) needs to use an operating system like for example Mac or Linux. These provide extended file name capabilities necessary for an attacker to be able to successfully use this vulnerability. For the attack to succeed the following conditions have to be met:\n- A WordPress admin uploads a malicious image file requested by a user this admin trusts or a popular malicious image that was spread via social media. This involves social engineering.\n- An attacker can now determine if the file name with which the malicious file is available on the WordPress site. With this information he can spread the URL to end users and the WordPress admin."
      }
    }
  ]
}
